{
  "hash": "17e6d5590971560bf324747f61d84c69",
  "result": {
    "engine": "knitr",
    "markdown": "# Calcolo combinatorio {#sec-apx-combinatorics}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"code\", \"_common.R\") |>\n    source()\n\nif (!requireNamespace(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(gtools, combinat)\n```\n:::\n\n\nIl **calcolo combinatorio** studia il numero di modi in cui è possibile combinare, ordinare o disporre elementi appartenenti a uno o più insiemi, seguendo regole ben definite. Molti problemi di probabilità richiedono strumenti combinatori per determinare la probabilità di eventi complessi. In questo capitolo, esploreremo i concetti fondamentali del calcolo combinatorio, illustrandoli attraverso il modello del **campionamento dall’urna**. Tratteremo i principi della somma e del prodotto, fondamentali per affrontare problemi più avanzati, come permutazioni, disposizioni e combinazioni.\n\n## Principio della somma\n\nIl **principio della somma** si applica quando un insieme di elementi può essere suddiviso in **sottoinsiemi disgiunti** (ossia senza sovrapposizioni). In questo caso, il numero totale di elementi è dato dalla somma delle cardinalità dei sottoinsiemi:\n\n$$\nn_{\\text{tot}} = n_1 + n_2 + \\dots + n_k .\n$$\n\n**Esempio**\n\nUn distributore contiene tre scomparti di caramelle, ciascuno con un diverso tipo di dolci:\n\n- **Scomparto A**: 10 caramelle alla menta,  \n- **Scomparto B**: 8 caramelle alla frutta,  \n- **Scomparto C**: 12 caramelle al cioccolato.  \n\nQuante caramelle ci sono in totale nel distributore?\n\nSecondo il **principio della somma**, il numero totale di caramelle è:\n\n$$\nn_{\\text{tot}} = n_A + n_B + n_C = 10 + 8 + 12 = 30.\n$$\n\nCalcolo in R:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nA <- 10\nB <- 8\nC <- 12\n\ntotale_caramelle <- A + B + C\ntotale_caramelle\n#> [1] 30\n```\n:::\n\n\n**Risultato**: Nel distributore ci sono **30 caramelle** in totale.\n\n## Principio del prodotto\n\nIl **principio del prodotto** si applica quando un’operazione può essere suddivisa in più **fasi indipendenti**, ciascuna con un numero specifico di possibilità. In tal caso, il numero totale di combinazioni è dato dal **prodotto** delle possibilità offerte da ciascuna fase:\n\n$$\nn_{\\text{tot}} = n_1 \\cdot n_2 \\cdot \\dots \\cdot n_k .\n$$\n\n**Esempio**\n\nSupponiamo di avere quattro urne contenenti palline di diverso colore:\n\n- **Urna A**: 5 palline,  \n- **Urna B**: 6 palline,  \n- **Urna C**: 3 palline,  \n- **Urna D**: 2 palline.  \n\nVogliamo formare insiemi di due palline, ciascuna estratta da urne differenti.\n\nSecondo il **principio del prodotto**, per ogni coppia di urne, il numero di combinazioni è dato dal prodotto del numero di palline contenute nelle due urne. Utilizziamo poi il **principio della somma** per ottenere il totale complessivo:\n\n$$\nn_{\\text{tot}} = AB + AC + AD + BC + BD + CD.\n$$\n\nCalcolo in R:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAB <- 5 * 6\nAC <- 5 * 3\nAD <- 5 * 2\nBC <- 6 * 3\nBD <- 6 * 2\nCD <- 3 * 2\n\ntotale_insiemi <- AB + AC + AD + BC + BD + CD\ntotale_insiemi\n#> [1] 91\n```\n:::\n\n\n**Risultato**: È possibile formare **91 insiemi** di due palline, ciascuna estratta da urne differenti.\n\n\n## Il modello dell'urna e i metodi di campionamento\n\nMolti problemi di calcolo combinatorio possono essere interpretati come **estrazioni di palline da un’urna**. Esistono quattro modi fondamentali di effettuare un campionamento, a seconda che:\n\n1. le estrazioni siano con o senza ripetizione,\n2. l'ordine degli elementi conti o meno.\n\nQueste quattro combinazioni danno origine a quattro principali metodi di campionamento:\n\n1. **Con ripetizione e con ordine**: Dopo ogni estrazione, la pallina viene rimessa nell'urna. (Es. formazione di codici numerici con ripetizioni)\n2. **Senza ripetizione e con ordine**: Ogni estrazione rimuove definitivamente la pallina dall'urna. (Es. assegnare premi in una gara)\n3. **Con ripetizione e senza ordine**: Si considerano i gruppi di elementi senza preoccuparsi dell'ordine. (Es. selezionare un certo numero di ingredienti da una dispensa)\n4. **Senza ripetizione e senza ordine**: Si scelgono elementi distinti senza considerare l’ordine. (Es. formare squadre da un gruppo di persone)\n\n::: {#exm-}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nurna <- c(\"a\", \"b\", \"c\")\n\n# Con ripetizione e ordine\ncampionamento1 <- expand.grid(urna, urna) |>\n    rename(Elemento1 = Var1, Elemento2 = Var2)\n\n# Senza ripetizione e con ordine\ncampionamento2 <- permutations(n = length(urna), r = 2, v = urna) |>\n    as.data.frame() |>\n    rename(Elemento1 = V1, Elemento2 = V2)\n\n# Con ripetizione e senza ordine\ncampionamento3 <- combinations(\n    n = length(urna), r = 2, v = urna, repeats.allowed = TRUE\n) |>\n    as.data.frame() |>\n    rename(Elemento1 = V1, Elemento2 = V2)\n\n# Senza ripetizione e senza ordine\ncampionamento4 <- combinations(n = length(urna), r = 2, v = urna) |>\n    as.data.frame() |>\n    rename(Elemento1 = V1, Elemento2 = V2)\n\n# Risultati\nlist(\n    `Con ripetizione e ordine` = campionamento1,\n    `Senza ripetizione e con ordine` = campionamento2,\n    `Con ripetizione e senza ordine` = campionamento3,\n    `Senza ripetizione e senza ordine` = campionamento4\n)\n#> $`Con ripetizione e ordine`\n#>   Elemento1 Elemento2\n#> 1         a         a\n#> 2         b         a\n#> 3         c         a\n#> 4         a         b\n#> 5         b         b\n#> 6         c         b\n#> 7         a         c\n#> 8         b         c\n#> 9         c         c\n#> \n#> $`Senza ripetizione e con ordine`\n#>   Elemento1 Elemento2\n#> 1         a         b\n#> 2         a         c\n#> 3         b         a\n#> 4         b         c\n#> 5         c         a\n#> 6         c         b\n#> \n#> $`Con ripetizione e senza ordine`\n#>   Elemento1 Elemento2\n#> 1         a         a\n#> 2         a         b\n#> 3         a         c\n#> 4         b         b\n#> 5         b         c\n#> 6         c         c\n#> \n#> $`Senza ripetizione e senza ordine`\n#>   Elemento1 Elemento2\n#> 1         a         b\n#> 2         a         c\n#> 3         b         c\n```\n:::\n\n:::\n\n## Permutazioni: Disporre tutti gli elementi con ordine\n\nLe **permutazioni** rappresentano tutti i modi in cui è possibile ordinare $n$ elementi distinti. Il numero di permutazioni è dato da:\n\n$$\nP_n = n!\n$$\n\ndove $n!$ (n fattoriale) è il prodotto di tutti i numeri da 1 a $n$:\n\n$$\nn! = n \\cdot (n-1) \\cdot (n-2) \\cdot \\dots \\cdot 1.\n$$\n\n### Intuizione della formula  \n\nImmaginiamo di avere **$n$ elementi distinti** e di doverli disporre in una sequenza. Il primo elemento può essere scelto in **$n$ modi**. Una volta scelto il primo, rimangono **$n-1$ possibilità** per il secondo, poi **$n-2$** per il terzo e così via, fino all'ultimo elemento, che avrà **1 sola possibilità**. Applicando il **principio del prodotto**, otteniamo:\n\n$$\nP_n = n \\times (n-1) \\times (n-2) \\times \\dots \\times 1 = n!\n$$\n\n### Metodo di campionamento corrispondente  \n\n- **Campionamento senza ripetizione e con ordine**: si estrae una pallina, la si esclude dall’urna e si continua fino a esaurire gli elementi.  \n- **Esempio pratico**: Ordinare i partecipanti di una gara su un podio (primo, secondo e terzo classificato).  \n\n### Esempio in R: Permutazioni di tre elementi\n\nSe abbiamo tre lettere {a, b, c}, le possibili permutazioni sono:\n\n$$\nP_3 = 3! = 3 \\times 2 \\times 1 = 6.\n$$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nA <- c(\"a\", \"b\", \"c\")\nperm <- permutations(n = length(A), r = length(A), v = A)\nprint(perm)\n#>      [,1] [,2] [,3]\n#> [1,] \"a\"  \"b\"  \"c\" \n#> [2,] \"a\"  \"c\"  \"b\" \n#> [3,] \"b\"  \"a\"  \"c\" \n#> [4,] \"b\"  \"c\"  \"a\" \n#> [5,] \"c\"  \"a\"  \"b\" \n#> [6,] \"c\"  \"b\"  \"a\"\nnrow(perm)  # Verifica del numero di permutazioni\n#> [1] 6\n```\n:::\n\n\n**Risultato**:\n\n$$\n\\{a, b, c\\}, \\{a, c, b\\}, \\{b, a, c\\}, \\{b, c, a\\}, \\{c, a, b\\}, \\{c, b, a\\}.\n$$\n\n\n## Disposizioni: Selezionare alcuni elementi con ordine\n\nLe **disposizioni** si usano quando si scelgono $k$ elementi da un insieme di $n$, rispettando l’ordine. Il numero totale di disposizioni è:\n\n$$\nD_{n,k} = \\frac{n!}{(n-k)!} .\n$$\n\n### Intuizione della formula \n\nSupponiamo di avere **$n$ elementi** e di voler scegliere solo **$k$ elementi**, mantenendo l’ordine.  \n\n- il primo elemento può essere scelto in **$n$ modi**;\n- il secondo elemento può essere scelto tra gli **$n-1$ elementi rimanenti**;  \n- il terzo tra gli **$n-2$** rimanenti.  \n\nSi prosegue fino a quando si hanno scelto **$k$ elementi**, fermandosi prima di esaurire tutti gli elementi.\n\n$$\nD_{n,k} = n \\times (n-1) \\times (n-2) \\times \\dots \\times (n-k+1) .\n$$\n\nQuesta espressione corrisponde alla divisione del fattoriale di $n$ per il fattoriale degli elementi che non vengono selezionati:\n\n$$\nD_{n,k} = \\frac{n!}{(n-k)!} .\n$$\n\n### Metodo di campionamento corrispondente  \n\n- **Campionamento senza ripetizione e con ordine**: si estrae una pallina, la si esclude dall’urna e si continua fino a raggiungere il numero desiderato di elementi, fermandosi prima di esaurire tutti gli elementi.  \n- **Esempio pratico**: Estrarre casualmente 2 studenti da una classe di 10 e assegnare loro i ruoli di rappresentante e vice-rappresentante (l’ordine conta).  \n\n### Esempio in R: Disposizioni di 2 elementi da {a, b, c}\n\nSe scegliamo 2 lettere su 3, il numero di disposizioni è:\n\n$$\nD_{3,2} = \\frac{3!}{(3-2)!} = \\frac{3 \\times 2 \\times 1}{1} = 6.\n$$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndisp <- permutations(n = length(A), r = 2, v = A)\nprint(disp)\n#>      [,1] [,2]\n#> [1,] \"a\"  \"b\" \n#> [2,] \"a\"  \"c\" \n#> [3,] \"b\"  \"a\" \n#> [4,] \"b\"  \"c\" \n#> [5,] \"c\"  \"a\" \n#> [6,] \"c\"  \"b\"\nnrow(disp)  # Verifica del numero di disposizioni\n#> [1] 6\n```\n:::\n\n\n**Risultato**:\n\n$$\n\\{a, b\\}, \\{a, c\\}, \\{b, a\\}, \\{b, c\\}, \\{c, a\\}, \\{c, b\\}.\n$$\n\nLe disposizioni **considerano l’ordine**, quindi $\\{a, b\\}$ è diverso da $\\{b, a\\}$.\n\n## Combinazioni: Selezionare alcuni elementi senza ordine\n\nLe **combinazioni** rappresentano il numero di modi per scegliere $k$ elementi da $n$ **senza considerare l'ordine**. Il numero di combinazioni è dato da:\n\n$$\nC_{n,k} = \\binom{n}{k} = \\frac{n!}{k!(n-k)!} .\n$$\n\n### Intuizione della formula  \n\nSupponiamo di avere **$n$ elementi** e di voler selezionare **$k$ elementi** **senza considerare l’ordine**.  \nCome nel caso delle disposizioni, il primo elemento può essere scelto in **$n$ modi**, il secondo in **$n-1$**, e così via fino a selezionare **$k$ elementi**.\n\n$$\nD_{n,k} = n \\times (n-1) \\times \\dots \\times (n-k+1) .\n$$\n\nTuttavia, in questo caso, l’ordine **non** conta, quindi ogni selezione viene **duplicata** per il numero di modi in cui i $k$ elementi possono essere ordinati, ossia **$k!$ permutazioni interne**. Per correggere questa duplicazione, dobbiamo dividere per $k!$:\n\n$$\nC_{n,k} = \\frac{D_{n,k}}{k!} = \\frac{n!}{k!(n-k)!} .\n$$\n\n### Metodo di campionamento corrispondente  \n\n- **Campionamento senza ripetizione e senza ordine**: si estrae una pallina e la si esclude dall’urna, ma non importa l’ordine in cui le palline vengono estratte.  \n- **Esempio pratico**: Formare una squadra di 2 studenti da un gruppo di 10 senza assegnare ruoli specifici (quindi $\\{a, b\\}$ è uguale a $\\{b, a\\}$).  \n\n### Esempio in R: Combinazioni di 2 elementi da {a, b, c}\n\nSe scegliamo 2 lettere su 3 senza considerare l’ordine, otteniamo:\n\n$$\nC_{3,2} = \\binom{3}{2} = \\frac{3!}{2!(3-2)!} = \\frac{3 \\times 2 \\times 1}{2 \\times 1 \\times 1} = 3.\n$$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncomb <- combinations(n = length(A), r = 2, v = A)\nprint(comb)\n#>      [,1] [,2]\n#> [1,] \"a\"  \"b\" \n#> [2,] \"a\"  \"c\" \n#> [3,] \"b\"  \"c\"\nnrow(comb)  # Verifica del numero di combinazioni\n#> [1] 3\n```\n:::\n\n\n**Risultato**:\n\n$$\n\\{a, b\\}, \\{a, c\\}, \\{b, c\\}.\n$$\n\nLe combinazioni **non considerano l’ordine**, quindi $\\{a, b\\}$ è uguale a $\\{b, a\\}$.\n\n\n## Sintesi: Quando usare ciascun metodo?\n\n| Metodo | Ripetizione? | Ordine? | Formula | Metodo di campionamento |\n|--------|-------------|---------|---------|----------------------|\n| **Permutazioni** | ❌ No | ✅ Sì | $n!$ | Senza ripetizione e con ordine |\n| **Disposizioni** | ❌ No | ✅ Sì | $\\frac{n!}{(n-k)!}$ | Senza ripetizione e con ordine |\n| **Combinazioni** | ❌ No | ❌ No | $\\binom{n}{k} = \\frac{n!}{k!(n-k)!}$ | Senza ripetizione e senza ordine |\n\nIn conclusione, abbiamo visto come il **modello dell’urna** aiuti a comprendere i problemi combinatori. Le differenze tra **permutazioni, disposizioni e combinazioni** dipendono da due fattori fondamentali: **ripetizione** e **ordine**.\n\nQuesta classificazione è essenziale per risolvere problemi di probabilità e statistica in modo rigoroso. Gli esempi e il codice R forniscono strumenti concreti per applicare questi concetti nella pratica.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}